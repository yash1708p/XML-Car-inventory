/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *Author: Yash Patel
 * Date: April 5 2020
 * Description: This program is a Car inventory which lets the user create and update information.(XML file)
 * 
 */

import java.io.File;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
 
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
public class xml extends javax.swing.JFrame {

    //initializing String values
   static String year;
   static String company;
   static String style;
   static String colour;
   static String mileage;
   Element element;
    String name;
    String value;
   
    
     DocumentBuilderFactory icFactory ;
    
    DocumentBuilder icBuilder;
    Document doc ;
   Element mainRootElement;
   
    public xml() {
       try {
           icFactory = DocumentBuilderFactory.newInstance();//obtains a new instance of a DocumentBuilderFactory
           icBuilder = icFactory.newDocumentBuilder();
           doc = icBuilder.newDocument();//obtains a new instance of a DOM Document object to build a DOM tree
            mainRootElement = doc.createElementNS("","Inventory");//creates a new element node with an associated namespace. This node will not show up in the document
       } catch (ParserConfigurationException ex) {//catching
           Logger.getLogger(xml.class.getName()).log(Level.SEVERE, null, ex);
       }
        initComponents();
    }
    
    public Node getCar(Document doc, String year, String company, String style,String colour,String mileage) {//The different fields
       Element car = doc.createElement("Car");//create the HTML element
       //the XML format
       car.appendChild(getCarElements(doc, car, "Year", year));//adds a node to the end of the list of children of a specified parent node
       car.appendChild(getCarElements(doc, car, "Company", company));//adds a node to the end of the list of children of a specified parent node
       car.appendChild(getCarElements(doc, car, "Style", style));//adds a node to the end of the list of children of a specified parent node
       car.appendChild(getCarElements(doc, car, "Colour", colour));//adds a node to the end of the list of children of a specified parent node
       car.appendChild(getCarElements(doc, car, "Mileage", mileage));//adds a node to the end of the list of children of a specified parent node
       return car;
   }
    public Node getCarElements(Document doc, Element element, String name, String value) {
       Element node = doc.createElement(name);//create the HTML element
       node.appendChild(doc.createTextNode(value));
       return node;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Year = new javax.swing.JTextField();
        Company = new javax.swing.JTextField();
        Style = new javax.swing.JTextField();
        Mileage = new javax.swing.JTextField();
        Colour = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputXML = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Car Inventory");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Year");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Company");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Style");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Colour");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Mileage");

        Year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearActionPerformed(evt);
            }
        });

        Company.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompanyActionPerformed(evt);
            }
        });

        Style.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StyleActionPerformed(evt);
            }
        });

        Mileage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MileageActionPerformed(evt);
            }
        });

        Colour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColourActionPerformed(evt);
            }
        });

        create.setText("Create new XML File");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setText("Update XML");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cars.JPG"))); // NOI18N
        jLabel7.setText("jLabel7");

        OutputXML.setEditable(false);
        OutputXML.setColumns(20);
        OutputXML.setRows(5);
        jScrollPane1.setViewportView(OutputXML);

        OutputText.setEditable(false);
        OutputText.setColumns(10);
        OutputText.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 14)); // NOI18N
        OutputText.setRows(5);
        jScrollPane2.setViewportView(OutputText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(create)
                        .addGap(31, 31, 31)
                        .addComponent(update))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Mileage, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Colour, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Style, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Year, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Company, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Company, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(Style, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Mileage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(create)
                            .addComponent(update))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Update XML button
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        year = Year.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        company = Company.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        style = Style.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        colour = Colour.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        mileage = Mileage.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
         
        mainRootElement.appendChild(getCar(doc, year, company, style, colour, mileage));//adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).
         try{
          Transformer transformer = TransformerFactory.newInstance().newTransformer();//Creates a new transformer that applies the identity transform
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");  //makes sure the XML file is formatted nicely with indent space of 4 
            DOMSource source = new DOMSource(doc);//Creating a DOM document
             StreamResult result = new StreamResult(new File("output.xml"));  //creates the file called output
 
		// Output to console screen  for testing, but you need to comment-out the previous "StreamResult result" line above. 
		//StreamResult result = new StreamResult(System.out);
 
		transformer.transform(source, result);
 
		System.out.println("File Saved In Project Directory");  //outputs to console "File Saved!"
           
            
            StreamResult console = new StreamResult(System.out);//Outputs as a String
            transformer.transform(source, console);//output
             
             StringWriter writer = new StringWriter();// used to write character streams in a String buffer and later can be used to obtain the stream as a String and even obtain the output buffer as a StringBuffer
                transformer.transform(source, new StreamResult(writer));//output
 
            String xmlString = writer.getBuffer().toString();//Printing XML to console or log file
           OutputXML.setText("XML Format: "+"\n"+ xmlString);//Outputing the data in XML format
           OutputText.append("\nDataBase Format: " +"\n"+ "\nYear " + year + "\nCompany: " + company
                    + "\nStyle: " + style + "\nColour: " + colour
                    + "\nMileage: " + mileage + "\n");//Outputting in a Database format
        
             }
         catch(Exception e){
             
         }
                   
        
       
    }//GEN-LAST:event_updateActionPerformed
//Create XML button
    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        year = Year.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        company = Company.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        style = Style.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        colour = Colour.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        mileage = Mileage.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
        
         icFactory = DocumentBuilderFactory.newInstance();//obtains a new instance of a DocumentBuilderFactory
           
        
        try {
            icBuilder = icFactory.newDocumentBuilder();
            
            doc = icBuilder.newDocument();//obtains a new instance of a DOM Document object to build a DOM tree
            mainRootElement = doc.createElementNS("","Inventory");//creates a new element node with an associated namespace. This node will not show up in the document
            
            doc.appendChild(mainRootElement);
 
            
            
            mainRootElement.appendChild(getCar(doc, year, company, style, colour, mileage));//adds a node to the end of the list of children of a specified parent node.
            
         
            // output DOM XML to console
            Transformer transformer = TransformerFactory.newInstance().newTransformer();//Creates a new transformer that applies the identity transform
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");  //makes sure the XML file is formatted nicely with indent space of 4 
            DOMSource source = new DOMSource(doc);//Creating a DOM document	
            StreamResult result = new StreamResult(new File("output.xml"));  //creates the file called output
 
		// Output to console screen  for testing, but you need to comment-out the previous "StreamResult result" line above. 
		//StreamResult result = new StreamResult(System.out);
 
		transformer.transform(source, result);
 
		System.out.println("File Saved In Project Directory");  //outputs to console "File Saved!"
           
            StreamResult console = new StreamResult(System.out);//Outputs as a String
            transformer.transform(source, console);//output
             
             StringWriter writer = new StringWriter();// used to write character streams in a String buffer and later can be used to obtain the stream as a String and even obtain the output buffer as a StringBuffer
                transformer.transform(source, new StreamResult(writer));//output
 
            String xmlString = writer.getBuffer().toString();//Printing XML to console or log file
           OutputXML.setText("XML Format: "+"\n"+ xmlString);//Outputing the data in XML format
           OutputText.setText("\nDataBase Format: " +"\n"+ "\nYear " + year + "\nCompany: " + company
                    + "\nStyle: " + style + "\nColour: " + colour
                    + "\nMileage: " + mileage + "\n");//Outputting in a Database format, but doesnt append(Doesnt create new data)
           
           
           
           
            
 
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
    }//GEN-LAST:event_createActionPerformed

    private void YearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearActionPerformed
        year = Year.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
    }//GEN-LAST:event_YearActionPerformed

    private void CompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompanyActionPerformed
        company = Company.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
    }//GEN-LAST:event_CompanyActionPerformed

    private void StyleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StyleActionPerformed
        style = Style.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
    }//GEN-LAST:event_StyleActionPerformed

    private void ColourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColourActionPerformed
        colour = Colour.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
    }//GEN-LAST:event_ColourActionPerformed

    private void MileageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MileageActionPerformed
        mileage = Mileage.getText();//takes in a input. Action Performer: Processes action events occurring on this text field by dispatching them to any registered ActionListener objects.
    }//GEN-LAST:event_MileageActionPerformed
    
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
       
       
        

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new xml().setVisible(true);//run XML class
            }
        });

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Colour;
    private javax.swing.JTextField Company;
    private javax.swing.JTextField Mileage;
    private javax.swing.JTextArea OutputText;
    private javax.swing.JTextArea OutputXML;
    private javax.swing.JTextField Style;
    private javax.swing.JTextField Year;
    private javax.swing.JButton create;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
